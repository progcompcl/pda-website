---
interface Props {
  variant?: "default" | "home";
}
const { variant = "default" } = Astro.props;

import { Image } from "astro:assets";
import logo from "../assets/logo.svg";
import logoSmall from "../assets/logo-small.svg";
import logoDark from "../assets/logo-dark.svg";
import logoDarkSmall from "../assets/logo-small-dark.svg";
import { MobileNav } from "./MobileNav";
import { DesktopNav } from "./DesktopNav";
import { ModeToggle } from "@/components/ModeToggle";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { Menu } from "lucide-react";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import type { NavbarItem } from "@/types/nav.ts";
import LanguagePicker from "./LanguagePicker.astro";
import { getRelativeLocaleUrl } from "astro:i18n";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const headerClasses = {
  default: "bg-gray-50 dark:bg-background shadow-md",
  home: "bg-black/10 backdrop-filter backdrop-blur",
}[variant];
const currentPath = Astro.url.pathname;

const navigationLinks: NavbarItem[] = [
  {
    label: t("nav.home"),
    href: "/",
  },
  {
    label: t("nav.information"),
    submenu: true,
    items: [
      {
        label: t("nav.about"),
        href: getRelativeLocaleUrl(lang, "/about"),
      },
      {
        label: t("nav.importantInformation"),
        href: getRelativeLocaleUrl(lang, "/important-information/"),
      },
      {
        label: t("nav.rules"),
        href: getRelativeLocaleUrl(lang, "/rules/"),
      },
      {
        label: t("nav.prizes"),
        href: getRelativeLocaleUrl(lang, "/prizes/"),
      },
      {
        label: t("nav.location"),
        href: getRelativeLocaleUrl(lang, "/location/"),
      },
    ],
  },
  {
    label: t("nav.schedule"),
    href: getRelativeLocaleUrl(lang, "/schedule/"),
  },
  {
    label: t("nav.sponsors"),
    href: getRelativeLocaleUrl(lang, "/sponsors/"),
  },
];
---

<header
  class:list={[
    "fixed top-0 w-[100%] h-[var(--header-height)]",
    "flex items-center justify-between px-4 py-2",
    "border-solid z-10",
    headerClasses,
  ]}
>
  {/* Logo */}
  <div id="header-logo" class="flex-1 basis-0">
    {
      variant !== "home" && (
        <a href="/">
          <Image
            src={logo}
            height="64"
            alt="Logo"
            class="hidden lg:block dark:hidden"
          />
          <Image
            src={logoSmall}
            height="64"
            alt="Logo"
            class="block lg:hidden dark:hidden"
          />
          <Image
            src={logoDark}
            height="64"
            alt="Logo"
            class="hidden dark:lg:block"
          />
          <Image
            src={logoDarkSmall}
            height="64"
            alt="Logo"
            class="hidden dark:block dark:lg:hidden"
          />
        </a>
      )
    }
  </div>

  {/* Desktop navigation menu */}
  <DesktopNav
    client:load
    navItems={navigationLinks}
    currentPath={currentPath}
  />
  {/* Header right side */}
  <div
    id="header-right"
    class="flex flex-1 basis-0 justify-end items-center gap-2"
  >
    {variant !== "home" && <ModeToggle client:visible />}

    {/* Mobile navigation trigger */}
    <nav class="lg:hidden">
      <MobileNav
        client:load
        navItems={navigationLinks}
        variant={variant}
        currentPath={currentPath}
      />
    </nav>
  </div>
</header>
